Assessment3-JS

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Colorful SVG Drawing Tool</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      background: linear-gradient(135deg, #ff9a9e, #fad0c4, #a1c4fd, #c2e9fb);
      background-size: 400% 400%;
      animation: gradientBG 10s ease infinite;
      margin: 0;
      padding: 20px;
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100vh;
    }

    @keyframes gradientBG {
      0% { background-position: 0% 50%; }
      50% { background-position: 100% 50%; }
      100% { background-position: 0% 50%; }
    }

    .drawing-container {
      background: white;
      border-radius: 15px;
      box-shadow: 0px 4px 20px rgba(0,0,0,0.2);
      padding: 15px;
    }

    h2 {
      text-align: center;
      margin-bottom: 10px;
      color: #444;
    }

    svg {
      border: 2px solid #ddd;
      background: #fdfdfd;
      border-radius: 12px;
      cursor: crosshair;
    }
  </style>
</head>
<body>
  <div class="drawing-container">
    <h2>ðŸŽ¨ Colorful SVG Drawing Tool</h2>
    <svg id="drawingArea" width="700" height="400"></svg>
  </div>

  <script>
    const svg = document.getElementById("drawingArea");
    let isDrawing = false;
    let path;
    
    function randomColor() {
      const colors = ["#FF5733"];
      return colors;
    }

    svg.addEventListener("mousedown", (e) => {
      isDrawing = true;
      const { offsetX, offsetY } = e;
      path = document.createElementNS("http://www.w3.org/2000/svg", "path");
      path.setAttribute("stroke", randomColor());
      path.setAttribute("stroke-width", "3");
      path.setAttribute("fill", "none");
      path.setAttribute("d", `M ${offsetX} ${offsetY}`);
      svg.appendChild(path);
    });

    svg.addEventListener("mousemove", (e) => {
      if (!isDrawing) return;
      const { offsetX, offsetY } = e;
      let d = path.getAttribute("d");
      path.setAttribute("d", `${d} L ${offsetX} ${offsetY}`);
    });

    svg.addEventListener("mouseup", () => {
      isDrawing = false;
    });

    svg.addEventListener("mouseleave", () => {
      isDrawing = false;
    });
  </script>
</body>
</html>
